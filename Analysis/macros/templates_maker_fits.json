{
    "#" :"List of fits.",
    "#" :"General form is <fit-name> : { <fit-config> }",
        
    "fits" : {
        "cic" : {
            "ndim"       : 2,                                                                "#" : "number of dimensions for the template  ",
            "bins"       : [ "mass", [500.0,1300.0] ],                                       "#" : "kinematic bins in which the fit is run ",
            "template_binning" : [ 0.0, 0.1, 5.0, 15.0 ],                                    "#" : "template varaible binning              ",
		
            "selection"    : "cic",
            "components" : [ "pp", "pf", "ff" ],                                             "#" : "list of fit components                 ",
            "dataset_variables" : ["mgg","mass","leadPt","subleadPt","leadEta","subleadEta", "leadMatchType", "subleadMatchType"],      "#" : "additional variables to be stored      ",
            "store_trees" : true,	

            "#" :"categories in which to split the fit       ",
            "#" :"format is <fit-category-name>: { <config> }",
            "categories" : {
                "EBHighR9" : { 
                    "src"  : "EBHighR9", "#" : "dataset category (or group) to use as input.",
                     "#" :"instruction for how to fill the templates                                                                     ",
                     "#" :" format is <condition> : [ <list-of-expressions> ]. the lenght of <list-of-expressions> has to be exactly ndim",

                     "#" :"Pseudo-random-swap.                    ",
                     "#" :" For even events order is lead,sublead.",
                     "#" :" For odd events sublead,lead           ",
                     "fill" : { 
                     "TMath::Even(event)" :[ "leadChIso", "subleadChIso" ],
                         "! TMath::Even(event)" :[ "subleadChIso", "leadChIso" ]
                      }
                }, 
                "EBLowR9" : { 
                    "src"  : "EBLowR9", "#" : "dataset category (or group) to use as input.",
                     "#" :"instruction for how to fill the templates                                                                     ",
                     "#" :" format is <condition> : [ <list-of-expressions> ]. the lenght of <list-of-expressions> has to be exactly ndim",

                     "#" :"Pseudo-random-swap.                    ",
                     "#" :" For even events order is lead,sublead.",
                     "#" :" For odd events sublead,lead           ",
                     "fill" : { 
                     "TMath::Even(event)" :[ "leadChIso", "subleadChIso" ],
                         "! TMath::Even(event)" :[ "subleadChIso", "leadChIso" ]
                      }
                }, 
                "EEHighR9" : { "src" : "EEHighR9" ,
                        "#" : "Here first photon is barrel, second is endcap",
                        "fill" : { 
                        "leadIsEB && ! subleadIsEB" :[ "leadChIso", "subleadChIso" ],
                            "! leadIsEB && subleadIsEB" :[ "subleadChIso", "leadChIso" ]
                       }
                },
                "EELowR9" : { "src" : "EELowR9" ,
                        "#" : "Here first photon is barrel, second is endcap",
                        "fill" : { 
                        "leadIsEB && ! subleadIsEB" :[ "leadChIso", "subleadChIso" ],
                        "! leadIsEB && subleadIsEB" :[ "subleadChIso", "leadChIso" ]
                       }
                } 
            },
	    "signals" : "__all__", 
		"truth_selection" : {
		    "pp" : "leadPrompt  && subleadPrompt",
			"pf" : "(leadPrompt && subleadFake) || (subleadPrompt && leadFake)",
                    "ff" : "leadFake    && subleadFake && ( leadMatchType != 0 || subleadMatchType != 0)",
                    "all_ff" : "leadFake    && subleadFake"
			},
            "templates" : {
                "pf" : { 
		        "sel"  : "cicNoChIsoSingleSB", 
                        "#" : "pseudo-random swap, but taking care to take the random cone isolation for the signal-region photon",
                        "#" : "  and the photon isolation for the side-band one                                                  ",
                        "fill_categories" : { 
                        "EBHighR9" :{ "leadIsSB && TMath::Even(event)" :    [ "leadChIso", "subleadRndConeChIso" ],
                                "leadIsSB && ! TMath::Even(event)" :    [ "subleadRndConeChIso", "leadChIso" ],
                                "subleadIsSB &&  TMath::Even(event)" : [ "subleadChIso", "leadRndConeChIso" ],
                                "subleadIsSB && ! TMath::Even(event)" : [ "leadRndConeChIso", "subleadChIso" ]
                        },
                        "EBLowR9" :{ "leadIsSB && TMath::Even(event)" :    [ "leadChIso", "subleadRndConeChIso" ],
                                "leadIsSB && ! TMath::Even(event)" :    [ "subleadRndConeChIso", "leadChIso" ],
                                "subleadIsSB &&  TMath::Even(event)" : [ "subleadChIso", "leadRndConeChIso" ],
                                "subleadIsSB && ! TMath::Even(event)" : [ "leadRndConeChIso", "subleadChIso" ]
                        },
                        "EEHighR9" :{ "leadIsEB && ! subleadIsEB &&      leadIsSB" : [ "leadChIso", "subleadRndConeChIso" ], 
                                "leadIsEB && ! subleadIsEB &&    subleadIsSB" : [ "leadRndConeChIso", "subleadChIso" ], 
                                "! leadIsEB && subleadIsEB &&   subleadIsSB" : [ "subleadChIso", "leadRndConeChIso" ], 
                                "! leadIsEB && subleadIsEB &&   leadIsSB" : [ "subleadRndConeChIso", "leadChIso" ]
                                },
                        "EELowR9" :{ "leadIsEB && ! subleadIsEB &&      leadIsSB" : [ "leadChIso", "subleadRndConeChIso" ], 
                                "leadIsEB && ! subleadIsEB &&    subleadIsSB" : [ "leadRndConeChIso", "subleadChIso" ], 
                                "! leadIsEB && subleadIsEB &&   subleadIsSB" : [ "subleadChIso", "leadRndConeChIso" ], 
                                "! leadIsEB && subleadIsEB &&   leadIsSB" : [ "subleadRndConeChIso", "leadChIso" ]
						}
				}
                        }			
		    }
	},	
        "cic2" : {
            "ndim"       : 2,                                                                "#" : "number of dimensions for the template  ",
            "bins"       : [ "mass", [500.0,1300.0] ],                                       "#" : "kinematic bins in which the fit is run ",
            "template_binning" : [ 0.0, 0.1, 5.0, 15.0 ],                                    "#" : "template varaible binning              ",
		
            "selection"    : "cic",
            "components" : [ "pp", "pf", "ff" ],                                             "#" : "list of fit components                 ",
            "dataset_variables" : ["mgg","mass [-1.0,0.0,20.0,50.0,100.0,200.0,500.0,13000.0]","leadPt","subleadPt","leadEta","subleadEta", "leadMatchType", "subleadMatchType"],      "#" : "additional variables to be stored      ",
            "store_trees" : true,	
            "categories" : {
                "EBEB" : { 
                    "src"  : "EBEB",
                     "fill" : { 
                         "TMath::Even(event)" :[ "leadChIso", "subleadChIso" ],
                         "! TMath::Even(event)" :[ "subleadChIso", "leadChIso" ]
                      }
                }, 
                "EBEE" : { "src" : "notEBEB" ,
                        "fill" : { 
                        "leadIsEB && ! subleadIsEB" :[ "leadChIso", "subleadChIso" ],
                            "! leadIsEB && subleadIsEB" :[ "subleadChIso", "leadChIso" ]
                       }
                }
            },
	    "signals" : "__all__", 
		"truth_selection" : {
		    "pp" : "leadPrompt  && subleadPrompt",
			"pf" : "(leadPrompt && subleadFake) || (subleadPrompt && leadFake)",
                    "ff" : "leadFake    && subleadFake && ( leadMatchType != 0 || subleadMatchType != 0)",
                    "all_ff" : "leadFake    && subleadFake"
			},
            "templates" : {
                "pf" : { 
		        "sel"  : "cicNoChIsoSingleSB", 
                        "fill_categories" : { 
                        "EBEB" :{ "leadIsSB && TMath::Even(event)" :    [ "leadChIso", "subleadRndConeChIso" ],
                                "leadIsSB && ! TMath::Even(event)" :    [ "subleadRndConeChIso", "leadChIso" ],
                                "subleadIsSB &&  TMath::Even(event)" : [ "subleadChIso", "leadRndConeChIso" ],
                                "subleadIsSB && ! TMath::Even(event)" : [ "leadRndConeChIso", "subleadChIso" ]
                        },
                        "EBEE" :{" leadIsEB && ! subleadIsEB &&  subleadIsSB" : [ "leadRndConeChIso", "subleadChIso" ], 
                                "  leadIsEB && ! subleadIsEB &&  leadIsSB" : [ "leadChIso", "subleadRndConeChIso" ], 
                                "! leadIsEB &&   subleadIsEB &&  subleadIsSB" : [ "subleadChIso", "leadRndConeChIso" ], 
                                "! leadIsEB &&   subleadIsEB &&  leadIsSB" : [ "subleadRndConeChIso", "leadChIso" ]
                                }
                        }			
		    }
	    }
	},	
        "2D" : {
            "ndim"       : 2,                                                                "#" : "number of dimensions for the template  ",
	    "dataset_variables" : ["mgg","mass [-1.0,0.0,20.0,50.0,100.0,200.0,500.0,13000.0]","leadPt","subleadPt","leadEta","subleadEta", "leadScEta","subleadScEta","leadMatchType", "subleadMatchType","leadPhoIso","subleadPhoIso"],      "#" : "additional variables to be stored      ",
             "store_trees" : true,
			"bins"       : [ "mass", [500.0,1300.0] ],                                       "#" : "kinematic bins in which the fit is run ",
            "template_binning" : [ 0.0,0.1, 5.0, 15.0 ],                                   "#" : "template varaible binning              ",

            "components" : [ "pp", "pf", "ff" ],                                             "#" : "list of fit components                 ",
            "#" :"categories in which to split the fit       ",
            "#" :"format is <fit-category-name>: { <config> }",
            "categories" : {
                "EBEB" : { 
                    "src"  : "EBEB", "#" : "dataset category (or group) to use as input.",
                     "#" :"instruction for how to fill the templates                                                                     ",
                     "#" :" format is <condition> : [ <list-of-expressions> ]. the lenght of <list-of-expressions> has to be exactly ndim",

                     "#" :"Pseudo-random-swap.                    ",
                     "#" :" For even events order is lead,sublead.",
                     "#" :" For odd events sublead,lead           ",
                     "fill" : { 
                     "TMath::Even(event)" :[ "leadChIso", "subleadChIso" ],
                         "! TMath::Even(event)" :[ "subleadChIso", "leadChIso" ]
                      }
                }, 
                "EBEE" : { "src" : "notEBEB" ,
                        "#" : "Here first photon is barrel, second is endcap",
                        "fill" : { 
                        "leadIsEB && !subleadIsEB" :[ "leadChIso", "subleadChIso" ],
                            "! leadIsEB && subleadIsEB" :[ "subleadChIso", "leadChIso" ]
                       }
                }
            },
            
            "#" :"MC truth selection.                                      ",
            "#" :"  This is applied to all fit categories in mc",
            "truth_selection" : {
                "pp" : "leadPrompt  && subleadPrompt",
                    "pf" : "(leadPrompt && subleadFake) || (subleadPrompt && leadFake)",
                    "ff" : "leadFake    && subleadFake && ( leadMatchType != 0 || subleadMatchType != 0)"
            },

	    "signals" : "__all__", 

            "#" :"Template creation.                      ",
	    "#" :"  Format is <component> : { <settings> }",
            "templates" : {
                "pp" : { 
		        "sel"  : "cicNoChIso", "#" : "event selection",
                        "dataset" : "data",    "#" : "input dataset. can be data,mc or templates",
                        "#" : "How to fill different categories. Logic is the same as for the 'fill' instructions above",
                        "fill_categories" : {
                        "EBEB" :{"TMath::Even(event) " : [ "leadRndConeChIso", "subleadRndConeChIso" ],
                                 "! TMath::Even(event)" : [ "subleadRndConeChIso", "leadRndConeChIso" ]
                                },
                        "EBEE" :{ "leadIsEB && !subleadIsEB" : [ "leadRndConeChIso", "subleadRndConeChIso" ], 
                                "!leadIsEB && subleadIsEB" : [ "subleadRndConeChIso", "leadRndConeChIso" ]
                                }
                            }
                },
                "pf" : { 
		        "sel"  : "cicNoChIsoSingleSB", 
                        "#" : "pseudo-random swap, but taking care to take the random cone isolation for the signal-region photon",
                        "#" : "  and the photon isolation for the side-band one                                                  ",
                        "fill_categories" : { 
                        "EBEB" :{ "leadIsSB  && TMath::Even(event)   && subleadPhoIsoEB" :    [ "leadChIso", "subleadRndConeChIso" ],
                                "leadIsSB    && ! TMath::Even(event) && subleadPhoIsoEB" :    [ "subleadRndConeChIso", "leadChIso" ],
                                "subleadIsSB &&  TMath::Even(event)  && leadPhoIsoEB" : [ "subleadChIso", "leadRndConeChIso" ],
                                "subleadIsSB && ! TMath::Even(event) && leadPhoIsoEB" : [ "leadRndConeChIso", "subleadChIso" ]
                        },
                        "EBEE" :{ "leadIsEB  &&  subleadPhoIsoEE&& leadIsSB" : [ "leadChIso", "subleadRndConeChIso" ], 
                                "leadPhoIsoEB&& ! subleadIsEB &&    subleadIsSB" : [ "leadRndConeChIso", "subleadChIso" ], 

                                "leadPhoIsoEE&& subleadIsEB &&   subleadIsSB" : [ "subleadChIso", "leadRndConeChIso" ], 
                                "! leadIsEB  && subleadPhoIsoEB && leadIsSB" : [ "subleadRndConeChIso", "leadChIso" ]
                                }
                        }
                 },
                 "ff" : { "sel"  : "cicNoChIsoDoubleSB",        
                         "fill_categories" : {
                         "EBEB" :{ "TMath::Even(event)  " : [ "leadChIso", "subleadChIso" ],
                                 "! TMath::Even(event) " : [ "subleadChIso", "leadChIso" ]
                                 },
                         "EBEE" :{ "leadIsEB && !subleadIsEB" : [ "leadChIso", "subleadChIso" ],
                                 "!leadIsEB && subleadIsEB" : [ "subleadChIso", "leadChIso" ]
                                 }
                            }
                        }
                }
        },
        "singlePho" : {
            "#" : "single photon: looks at single photon selection",

            "ndim"       : 1,
            "bins"       : [ "phoPt", [100,7000] ],
            "dataset_variables" : ["phoPt","phoPhoIso","phoRndConePhoIso","phoPhoIsoEA","phoEta","phoScEta","phoPhi","phoEnergy := phoPt*cosh(phoEta)","phoSigmaIeIe","phoGenIso","phoMatchType"],
	    "template_binning" : [0.0,0.1,5.0,15.0],
            "store_trees"  : true,
            "selection"    : "cicNoChIsoSinglePho",
            "preselection" : "phoPt >170.",
            "components" : ["p", "f"],
            "categories" : { 
                "EB" : { 
                    "src" : "EBEB",
                        "fill" : { "1" : ["phoChIso"] }
                }, 
                "EE" : {
                    "src" : "notEBEB",
                        "fill" : { "1" : ["phoChIso"] }
                
                },
                "eta_inclusive" :{
                        "src" : "eta_inclusive",
                            "fill" : { "1" : ["phoChIso"] }
				}
            },
            "truth_selection" : {
                "p" : "phoPrompt",
                "f" : "phoFake"
            },
            "templates" : {
                "p" : {
                    "sel" : "cicNoChIsoSinglePho",
                    "dataset" : "data",
                        "fill_categories" : { 
                            "EB" : { "phoIsEB" : ["phoRndConeChIso"] },
                            "EE" : { "!phoIsEB" : ["phoRndConeChIso"] },
                            "eta_inclusive" : { "phoIsEB ||!phoIsEB" : ["phoRndConeChIso"] }
                    }
                },
                "f" : { 
                    "sel" : "cicNoChIsoSBSinglePho",
                        "fill_categories" : { 
                        "EB" : { "phoIsSB" : ["phoChIso"] },
                        "EE" : { "phoIsSB" : ["phoChIso"] },
                        "eta_inclusive" : { "phoIsSB" : ["phoChIso"] }
                    }
				},
                "f1" : { 
                    "sel" : "cicNoChIsoSBSinglePho",
                        "fill_categories" : { 
                        "EB" : { "TMath::Even(event) && phoIsSB" : ["phoChIso"] },
                        "EE" : { "TMath::Even(event) && phoIsSB" : ["phoChIso"] },
                        "eta_inclusive" : { "TMath::Even(event) && phoIsSB" : ["phoChIso"] }
                    }
                },
                "f2" : { 
                    "sel" : "cicNoChIsoSBSinglePho",
                        "fill_categories" : { 
                        "EB" : { "!TMath::Even(event) && phoIsSB" : ["phoChIso"] },
                        "EE" : { "!TMath::Even(event) && phoIsSB" : ["phoChIso"] },
                        "eta_inclusive" : { "!TMath::Even(event) && phoIsSB" : ["phoChIso"] }
                    }
                }
            },
	    "_templates" : {
	    	"_fwhigh" : { 
                    "sel" : "cicNoChIsoSBSinglePho",
                        "fill_categories" : { 
                        	"EB" : { "phoIsSB && weight >=1." : ["phoChIso"] },
                        	"EE" : { "phoIsSB && weight >=1." : ["phoChIso"] },
                        	"eta_inclusive" : { "phoIsSB && weight>=1."  : ["phoChIso"] }
                	}
				},
                "_fwlow" : { 
                    "sel" : "cicNoChIsoSBSinglePho",
                        "fill_categories" : { 
                        	"EB" : { "phoIsSB && weight <1." : ["phoChIso"] },
                        	"EE" : { "phoIsSB && weight <1." : ["phoChIso"] },
                        	"eta_inclusive" : { "phoIsSB && weight <1." : ["phoChIso"] }
					}
				}
	    }
        }
},
    "#" : "---------------------------------------------------------------------------------------------------------------------",
    "#" : "Template mixing                                                                                                      ",
    "#" : "---------------------------------------------------------------------------------------------------------------------",


    "mix" : { 
	"kDSinglePho2D" : {
		"target" : "2D",
		"ptLeadMin" : 100.0, "ptSubleadMin" : 100.0, "massMin" : 200.0,
		"pt" : "phoPt", "eta" : "phoEta", "phi" : "phoPhi", "energy" : "phoEnergy",
		"sources" : { 
		    "pf" : [ "singlePho:p", "singlePho:f" ],
                    "ff" : [ "singlePho:f1", "singlePho:f2" ]
		    }, 
		"replace" : "pho",
		"type" : "kdtree",
                "transfer_variables" :["mass", "weightTarget:= weight", "mgg := mass"],
		"fill_categories" : {
		    "EBEB" : { "legs" : ["EB","EB"], "rndswap" : true,"rndmatch":0.8, "nNeigh" : 20, "nMinNeigh" : 10, "matchWithThreshold" : false,
			    "useCdfDistance" : true,"targetFraction" : 1e-2, "maxWeightTarget" :0.02, "maxWeightCache":1.0 ,
				"axesWeights" : [1.0,1.0,-1.0],
			    "match1"  : ["nvtx","log(phoPt)"    ,"TMath::Abs(phoScEta)"    ], 
			    "match2"  : ["nvtx","log(phoPt)"    ,"TMath::Abs(phoScEta)"    ], 
			    "target1" : ["nvtx","log(leadPt)"   ,"TMath::Abs(leadScEta)[0.2]"   ], 
			    "target2" : ["nvtx","log(subleadPt)","TMath::Abs(subleadScEta)[0.2]"]
			    },
		    "EBEE" : { "legs" : ["eta_inclusive","eta_inclusive"], "rndswap" : false, "nNeigh" : 20, "matchWithThreshold" : false,
			    "useCdfDistance" : true, "targetFraction" : 1e-2, "maxWeightTarget" :0.02, "maxWeightCache":1.0 ,"rndmatch":0.6,
			    "axesWeights" : [1.0,1.0,-1.0],
			    "match1"  : ["phoPhoIso","log(phoPt)" ,"TMath::Abs(phoScEta)"    ], 
			    "match2"  : ["phoPhoIso","log(phoPt)" ,"TMath::Abs(phoScEta)"    ], 
			    "target1" : ["(TMath::Abs(leadScEta)<TMath::Abs(subleadScEta))*leadPhoIso + (TMath::Abs(leadScEta)>=TMath::Abs(subleadScEta))*subleadPhoIso[10]",
					 "log((TMath::Abs(leadScEta)<TMath::Abs(subleadScEta))*leadPt       + (TMath::Abs(leadScEta)>=TMath::Abs(subleadScEta))*subleadPt)",
					 "(TMath::Abs(leadScEta)<TMath::Abs(subleadScEta))*TMath::Abs(leadScEta)    + (TMath::Abs(leadScEta)>=TMath::Abs(subleadScEta))*TMath::Abs(subleadScEta)"
					 ],
			    "target2" : ["(TMath::Abs(leadScEta)<TMath::Abs(subleadScEta))*subleadPhoIso + (TMath::Abs(leadScEta)>=TMath::Abs(subleadScEta))*leadPhoIso[10]",
					 "log((TMath::Abs(leadScEta)<TMath::Abs(subleadScEta))*subleadPt    + (TMath::Abs(leadScEta)>=TMath::Abs(subleadScEta))*leadPt)",
					 "(TMath::Abs(leadScEta)<TMath::Abs(subleadScEta))*TMath::Abs(subleadScEta) + (TMath::Abs(leadScEta)>=TMath::Abs(subleadScEta))*TMath::Abs(leadScEta)"
					 ]
				}
		}
	}

    },
    "comparisons" : {
	"fit2DTruth" : { "fit" : "2D",
		"templates" : { "mix:kDSinglePho2D" : {},"2D":{} },
                "categories" : ["EBEB","EBEE"],
                "components": ["pf","ff",  ["pp",{ "2D" : {}}] 
                ],
                "prepfit": true,
                "weight_cut": "weight < 5.",
		"redo" : true,
		"doDataMc" : false, "doMcTruth" : true,
                "template_binning" : [ 0.0,0.1,5.0,15.0],
                "_template_binning" : [ 0.0,0.1,0.3,0.5,1.0,2.0,3.0,5.0,10.0,15.0], 
                "lowerLimitSigRegion2D": "0.", 
                "_upperLimitSigRegion2D": "4.", 
                "_upperLimitSigRegion1D": "5.", 
                "upperLimitSigRegion2D": "9.", 
                "upperLimitSigRegion1D": "15.", 
		"mass_binning" :"mass[13000,200.0,13000.0]"
		}
	},
    "corrPlot":{
                "categories" :["EB","EE"]
    },
   "nominalFit":{
        "3_components":{
                "dimensions" :"2D", 
                "observable": "templateNdim2d_unroll",
                "components": ["pp","pf","ff"],
                "lowerLimitSigRegion": "0.", 
                "upperLimitSigRegion": "9.", 
                "_upperLimitSigRegion": "4.", 
		"mass_binning" :"mass[13000,0.0,13000.0]",
                "extended_fit":"False"
         },
        "_2_components":{
                "dimensions" :"2D", 
                "observable": "templateNdim2d_unroll",
                "components": ["pp","pf"],
                "data": "unrolled_data", 
                "lowerLimitSigRegion": "0.", 
                "upperLimitSigRegion": "4.", 
		"mass_binning" :"mass[13000,0.0,13000.0]"
        }
    },
   "plotPurity":{
                "_treetruth":"truth_purity_all",
                "treetruth":"truth_purity_signalregion",
                "dimensions" :"2D", 
                "categories" :["EBEE","EBEB"]
    },
    "build3d":{
            "ndim":"2", 
            "categories" : ["EBEB","EBEE"],
            "templates":["reduced_template_mix" ],
            "components": ["pf","ff","pp"], 
            "weight_cut": "weight < 5."
    }

}
